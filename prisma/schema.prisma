// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  events        Event[]   @relation("EventCreator")
  rsvps         RSVP[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  startDate   DateTime
  endDate     DateTime
  location    String
  category    EventCategory
  image       String?
  maxAttendees Int?
  isPrivate   Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId   String
  creator     User     @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  rsvps       RSVP[]

  @@map("events")
}

model RSVP {
  id        String   @id @default(cuid())
  status    RSVPStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("rsvps")
}

enum EventCategory {
  CONCERT
  SHOW
  OPERA
  THEATER
  CONFERENCE
  WORKSHOP
  TEAMBUILDING
  BIRTHDAY
  WEDDING
  CORPORATE
  OTHER
}

enum RSVPStatus {
  GOING
  MAYBE
  NOT_GOING
}
